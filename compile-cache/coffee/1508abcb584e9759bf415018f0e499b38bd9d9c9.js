(function() {
  var Tab;

  Tab = require('../lib/console/tab');

  describe('Console - Tab', function() {
    var command, tab, _ref;
    _ref = [], command = _ref[0], tab = _ref[1];
    beforeEach(function() {
      command = {
        project: atom.project.getPaths()[0],
        name: 'Test Command',
        command: 'test',
        wd: '.',
        output: {
          console: {
            close_success: true
          }
        }
      };
      atom.config.set('build-tools.CloseOnSuccess', 0);
      return tab = new Tab(command);
    });
    afterEach(function() {
      return tab.destroy();
    });
    describe('On ::clear', function() {
      beforeEach(function() {
        spyOn(tab.view, 'clear').andCallThrough();
        return tab.clear();
      });
      it('clears the return variables', function() {
        expect(tab.error).toBeNull();
        return expect(tab.code).toBeNull();
      });
      return it('calls view::clear', function() {
        return expect(tab.view.clear).toHaveBeenCalled();
      });
    });
    describe('On ::setRunning', function() {
      return it('sets the tab header to "running"', function() {
        tab.setRunning();
        return expect(tab.header.icon[0].className).toBe('icon icon-sync');
      });
    });
    describe('On ::setError', function() {
      beforeEach(function() {
        return tab.setError('Error');
      });
      it('sets the tab header to "error"', function() {
        return expect(tab.header.icon[0].classList.contains('icon-x')).toBe(true);
      });
      return it('sets the error variable', function() {
        expect(tab.error).toBe('Error');
        return expect(tab.code).toBe(-1);
      });
    });
    describe('On ::setFinished', function() {
      var spy;
      spy = null;
      beforeEach(function() {
        spy = jasmine.createSpy('close');
        tab.emitter.on('close', spy);
        return tab.setFinished({
          exitcode: 0,
          signal: null
        });
      });
      it('sets the tab header to "error"', function() {
        return expect(tab.header.icon[0].classList.contains('icon-check')).toBe(true);
      });
      return it('sets the error variable', function() {
        return expect(tab.code).toBe(0);
      });
    });
    return describe('On ::setCancelled', function() {
      beforeEach(function() {
        return tab.setCancelled();
      });
      it('sets the tab header to "error"', function() {
        return expect(tab.header.icon[0].classList.contains('icon-x')).toBe(true);
      });
      return it('sets the error variable', function() {
        return expect(tab.code).toBe(-2);
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL2hvbWUvbml2Ly5hdG9tL3BhY2thZ2VzL2J1aWxkLXRvb2xzL3NwZWMvdGFiLXNwZWMuY29mZmVlIgogIF0sCiAgIm5hbWVzIjogW10sCiAgIm1hcHBpbmdzIjogIkFBQUE7QUFBQSxNQUFBLEdBQUE7O0FBQUEsRUFBQSxHQUFBLEdBQU0sT0FBQSxDQUFRLG9CQUFSLENBQU4sQ0FBQTs7QUFBQSxFQUVBLFFBQUEsQ0FBUyxlQUFULEVBQTBCLFNBQUEsR0FBQTtBQUN4QixRQUFBLGtCQUFBO0FBQUEsSUFBQSxPQUFpQixFQUFqQixFQUFDLGlCQUFELEVBQVUsYUFBVixDQUFBO0FBQUEsSUFFQSxVQUFBLENBQVcsU0FBQSxHQUFBO0FBQ1QsTUFBQSxPQUFBLEdBQ0U7QUFBQSxRQUFBLE9BQUEsRUFBUyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQWIsQ0FBQSxDQUF3QixDQUFBLENBQUEsQ0FBakM7QUFBQSxRQUNBLElBQUEsRUFBTSxjQUROO0FBQUEsUUFFQSxPQUFBLEVBQVMsTUFGVDtBQUFBLFFBR0EsRUFBQSxFQUFJLEdBSEo7QUFBQSxRQUlBLE1BQUEsRUFDRTtBQUFBLFVBQUEsT0FBQSxFQUNFO0FBQUEsWUFBQSxhQUFBLEVBQWUsSUFBZjtXQURGO1NBTEY7T0FERixDQUFBO0FBQUEsTUFRQSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQVosQ0FBZ0IsNEJBQWhCLEVBQThDLENBQTlDLENBUkEsQ0FBQTthQVNBLEdBQUEsR0FBVSxJQUFBLEdBQUEsQ0FBSSxPQUFKLEVBVkQ7SUFBQSxDQUFYLENBRkEsQ0FBQTtBQUFBLElBY0EsU0FBQSxDQUFVLFNBQUEsR0FBQTthQUNSLEdBQUcsQ0FBQyxPQUFKLENBQUEsRUFEUTtJQUFBLENBQVYsQ0FkQSxDQUFBO0FBQUEsSUFpQkEsUUFBQSxDQUFTLFlBQVQsRUFBdUIsU0FBQSxHQUFBO0FBRXJCLE1BQUEsVUFBQSxDQUFXLFNBQUEs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

//# sourceURL=/home/niv/.atom/packages/build-tools/spec/tab-spec.coffee
