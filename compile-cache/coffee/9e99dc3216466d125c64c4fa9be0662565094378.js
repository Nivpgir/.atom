(function() {
  var $, Command, Modifiers, Pane;

  Pane = require('../lib/view/command-edit-stream-pane');

  Command = require('../lib/provider/command');

  Modifiers = require('../lib/stream-modifiers/modifiers');

  $ = require('atom-space-pen-views').$;

  describe('Stream Pipe Pane', function() {
    var view;
    view = null;
    beforeEach(function() {
      Modifiers.reset();
      view = new Pane;
      return jasmine.attachToDOM(view.element);
    });
    afterEach(function() {
      return view.remove();
    });
    it('initializes the view', function() {
      return expect(view.panes).toEqual([]);
    });
    describe('on ::set with empty command', function() {
      var command;
      command = null;
      beforeEach(function() {
        spyOn(atom.contextMenu, 'add').andCallThrough();
        command = new Command;
        return view.set(command, 'stdout');
      });
      it('sets up the context menu', function() {
        return expect(atom.contextMenu.add).toHaveBeenCalledWith({
          '.stdout #add-modifier': [
            {
              label: 'Highlight All',
              command: 'build-tools:add-all'
            }, {
              label: 'Highlighting Profile',
              command: 'build-tools:add-profile'
            }, {
              label: 'Regular Expression',
              command: 'build-tools:add-regex'
            }, {
              label: 'Remove ANSI Codes',
              command: 'build-tools:add-remansi'
            }
          ]
        });
      });
      it('loads no views', function() {
        return expect(view.panes).toEqual([]);
      });
      describe('On add module', function() {
        beforeEach(function() {
          spyOn(view, 'initializePane');
          view.addModifier('all');
          return view.addModifier('remansi');
        });
        it('adds the module\'s pane', function() {
          expect(view.panes[0].key).toBe('all');
          expect(view.panes[0].view.get).toBeDefined();
          expect(view.panes[1].key).toBe('remansi');
          expect(view.panes[1].view.get).toBeDefined();
          return expect(view.panes_view[0].children.length).toBe(2);
        });
        return it('initializes the module', function() {
          var args;
          args = view.initializePane.calls[0].args;
          expect(args[0]).toBe(view.panes[0].view);
          expect(args[1]).toBeUndefined();
          args = view.initializePane.calls[1].args;
          expect(args[0]).toBe(view.panes[1].view);
          return expect(args[1]).toBeUndefined();
        });
      });
      describe('On remove module', function() {
        beforeEach(function() {
          view.addModifier('all');
          view.addModifier('remansi');
          return view.removeModifier(1);
        });
        it('removes the module pane', function() {
          return expect(view.panes_view[0].children.length).toBe(1);
        });
        return it('removes the module data', function() {
          expect(view.panes.length).toBe(1);
          return expect(view.panes[0].key).toBe('all');
        });
      });
      return describe('On move', function() {
        beforeEach(function() {
          view.addModifier('all');
          return view.addModifier('remansi');
        });
        it('moves the modifier up', function() {
          view.moveModifierUp(1);
          expect(view.panes[0].key).toBe('remansi');
          expect(view.panes[1].key).toBe('all');
          return expect(view.panes_view.children()[0]).toBe(view.panes[0].pane[0]);
        });
        return it('moves the modifier down', function() {
          view.moveModifierDown(0);
          expect(view.panes[0].key).toBe('remansi');
          expect(view.panes[1].key).toBe('all');
          return expect(view.panes_view.children()[1]).toBe(view.panes[1].pane[0]);
        });
      });
    });
    return describe('on ::set with defined command', function() {
      var command, disp, mod, module;
      command = null;
      module = null;
      mod = null;
      disp = null;
      beforeEach(function() {
        var TestSaver;
        module = {
          name: 'Test Module',
          edit: TestSaver = (function() {
            function TestSaver() {
              this.get = jasmine.createSpy('get').andCallFake(function(c) {
                c.stdout.pipeline.push({
                  name: 'testmodule',
                  config: {
                    a: 2
                  }
                });
                return null;
              });
              this.set = jasmine.createSpy('set');
              this.destroy = jasmine.createSpy('destroy');
              mod = this;
            }

            return TestSaver;

          })()
        };
        disp = Modifiers.addModule('testmodule', module);
        command = new Command;
        command.oldname = 'foo';
        command.stdout.pipeline.push({
          name: 'testmodule',
          config: {
            a: 1
          }
        });
        return view.set(command, 'stdout');
      });
      afterEach(function() {
        return disp.dispose();
      });
      it('adds one modifier', function() {
        return expect(mod.set).toHaveBeenCalledWith(command, command.stdout.pipeline[0].config, 'stdout', void 0);
      });
      it('adds the view', function() {
        expect(view.panes[0].key).toBe('testmodule');
        return expect(view.panes_view.children()[0]).toBe(view.panes[0].pane[0]);
      });
      describe('on ::get', function() {
        var command2, ret;
        command2 = null;
        ret = null;
        beforeEach(function() {
          command2 = new Command;
          return ret = view.get(command2, 'stdout');
        });
        it('calls ::get of modifier', function() {
          return expect(mod.get).toHaveBeenCalledWith(command2, 'stdout');
        });
        it('sets the new command', function() {
          return expect(command2.stdout.pipeline[0]).toEqual({
            name: 'testmodule',
            config: {
              a: 2
            }
          });
        });
        return it('returns nothing', function() {
          return expect(ret).toBeNull();
        });
      });
      return describe('on destroy', function() {
        beforeEach(function() {
          return view.remove();
        });
        it('removes all panes', function() {
          return expect(view.panes_view[0].children.length).toBe(0);
        });
        return it('calls ::destroy of all modifiers', function() {
          return expect(mod.destroy).toHaveBeenCalled();
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,

//# sourceURL=/home/niv/.atom/packages/build-tools/spec/command-edit-stream-spec.coffee
