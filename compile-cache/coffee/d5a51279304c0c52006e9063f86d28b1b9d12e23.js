(function() {
  var Modifiers, Pipeline, path;

  Pipeline = require('../lib/pipeline/output-pipeline');

  Modifiers = require('../lib/stream-modifiers/modifiers');

  path = require('path');

  describe('Output Pipeline', function() {
    var callbacks, command, dest, disp, inst, mod, pipe;
    pipe = null;
    mod = null;
    disp = null;
    dest = null;
    command = null;
    inst = null;
    callbacks = null;
    beforeEach(function() {
      var TestModifier, k, _i, _len, _ref;
      dest = jasmine.createSpy('destroy');
      command = {
        project: atom.project.getPaths()[0],
        wd: '.',
        stdout: {
          pipeline: [
            {
              name: 'test',
              config: {
                a: 1
              }
            }
          ]
        }
      };
      mod = {
        modifier: TestModifier = (function() {
          function TestModifier(config, settings, pipe) {
            this.config = config;
            this.settings = settings;
            this.pipe = pipe;
            this.modify = jasmine.createSpy('modify').andCallFake(function(_arg) {
              var perm, temp;
              temp = _arg.temp, perm = _arg.perm;
              temp.foo = 123;
              perm.bar = 231;
              temp.type = 'error';
              this.pipe.setType(temp);
              return 1;
            });
            this.destroy = dest;
            this.getFiles = jasmine.createSpy('getFiles').andCallFake(function(_arg) {
              var perm, temp;
              temp = _arg.temp, perm = _arg.perm;
              if (temp.input === 'hello') {
                return [];
              }
              return [
                {
                  start: 0,
                  end: 10,
                  file: 'test.vhd'
                }
              ];
            });
          }

          TestModifier.prototype.modify = function() {};

          return TestModifier;

        })()
      };
      callbacks = {
        setType: jasmine.createSpy('setType'),
        replacePrevious: jasmine.createSpy('replacePrevious'),
        print: jasmine.createSpy('print'),
        linter: jasmine.createSpy('linter')
      };
      disp = Modifiers.addModule('test', mod);
      pipe = new Pipeline(command, command.stdout);
      _ref = Object.keys(callbacks);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        k = _ref[_i];
        pipe.subscribeToCommands(callbacks, k, k);
      }
      inst = pipe.pipeline[0];
      spyOn(pipe, 'absolutePath').andCallThrough();
      return spyOn(pipe, 'finishLine').andCallThrough();
    });
    afterEach(function() {
      pipe.destroy();
      expect(dest).toHaveBeenCalled();
      return disp.dispose();
    });
    it('initializes the modifier', function() {
      expect(inst.config).toBe(command.stdout.pipeline[0].config);
      expect(inst.settings).toBe(command);
      return expect(inst.pipe).toBe(pipe);
    });
    describe('on ::getFiles', function() {
      var ret;
      ret = null;
      beforeEach(function() {
        return ret = pipe.getFiles({
          input: 'foo'
        });
      });
      it('calls ::getFiles of all pipeline objects', function() {
        expect(inst.getFiles).toHaveBeenCalled();
        return expect(inst.getFiles.mostRecentCall.args).toEqual([
          {
            temp: {
              input: 'foo'
            },
            perm: {
              cwd: '.'
            }
          }
        ]);
      });
      return it('returns the correct array', function() {
        return expect(ret).toEqual([
          {
            start: 0,
            end: 10,
            file: path.join(atom.project.getPaths()[0], 'test.vhd')
          }
        ]);
      });
    });
    describe('on ::finishLine', function() {
      describe('without highlighting', function() {
        beforeEach(function() {
          return pipe.finishLine({
            input: 'hello'
          }, 'hello');
        });
        return it('does not update anything', function() {
          expect(callbacks.print).not.toHaveBeenCalled();
          expect(callbacks.linter).not.toHaveBeenCalled();
          return expect(callbacks.setType).not.toHaveBeenCalled();
        });
      });
      describe('with highlighting', function() {
        beforeEach(function() {
          return pipe.finishLine({
            input: 'hello',
            type: 'warning'
          }, 'hello');
        });
        return it('calls only setType', function() {
          expect(callbacks.print).not.toHaveBeenCalled();
          expect(callbacks.linter).not.toHaveBeenCalled();
          return expect(callbacks.setType).toHaveBeenCalledWith('warning');
        });
      });
      return describe('with highlighting and file matches', function() {
        var td;
        td = null;
        beforeEach(function() {
          td = {
            input: 'foo',
            file: 'test.vhd',
            row: 10,
            type: 'warning',
            message: 'hello'
          };
          return pipe.finishLine(td, 'foo');
        });
        return it('calls print and linter', function() {
          expect(callbacks.print).toHaveBeenCalledWith({
            input: td,
            files: [
              {
                start: 0,
                end: 10,
                file: path.join(atom.project.getPaths()[0], 'test.vhd')
              }
            ]
          });
          expect(callbacks.linter.mostRecentCall.args[0]).toEqual({
            type: 'warning',
            text: 'hello',
            filePath: path.join(atom.project.getPaths()[0], 'test.vhd'),
            range: [[9, 0], [9, 9999]],
            trace: void 0
          });
          return expect(callbacks.setType).not.toHaveBeenCalled();
        });
      });
    });
    return describe('on ::in', function() {
      beforeEach(function() {
        return pipe["in"]('hello');
      });
      it('calls modify', function() {
        return expect(inst.modify).toHaveBeenCalled();
      });
      it('did not call finishLine', function() {
        return expect(pipe.finishLine).not.toHaveBeenCalled();
      });
      return it('calls setType', function() {
        return expect(callbacks.setType).toHaveBeenCalledWith('error');
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,

//# sourceURL=/home/niv/.atom/packages/build-tools/spec/output-pipeline-spec.coffee
